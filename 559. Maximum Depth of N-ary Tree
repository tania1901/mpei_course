//https://leetcode.com/problems/maximum-depth-of-n-ary-tree/


/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
public:
   
int maxDepth(Node* root) {
        if(root==NULL) return 0;
        vector<int> depth;
        findDepth(root,depth,1);//ну хоть один уже есть
        int max=0;
        for(int i=0;i<depth.size();i++)
            if(depth[i]>max)
                max=depth[i];
        return max;
    }
    
    void findDepth(Node* root,vector<int>& depth ,int d){
        if(root!=NULL){
            for(int i=0;i<root->children.size();i++){
                if(root->children[i]!=NULL)
                    findDepth(root->children[i],depth,d+1);//прибавляем текущую глубину
            }
            depth.push_back(d);//раз из рекурсии вышли,то детей нет=>максимальная глубина
        }
    }
};
